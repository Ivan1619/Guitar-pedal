#include <stdio.h>
#include <bcm2835.h> 

#define DELAY_MAX 800000 	
#define DELAY_MIN 0
#define Button2           RPI_V2_GPIO_P1_38     
#define FS                RPI_GPIO_P1_10
#define TS                RPI_V2_GPIO_P1_32
#define Button1           RPI_GPIO_P1_08              
#define LED               RPI_V2_GPIO_P1_36   
 
//effects variables
uint32_t booster_value=2047; 
uint32_t fuzz_value = 50; 	
uint32_t Delay_Buffer[DELAY_MAX];
uint32_t DelayCounter = 0;
uint32_t delay;
uint32_t Echo_Buffer[DELAY_MAX];
uint32_t Delay_Depth = 50000;

uint32_t rTimer = 0;
uint32_t input_signal = 0;
  
uint8_t FS_value;
uint8_t TS_value;
uint8_t Button1_value;
uint8_t Button2_value;
  
int main(int argc, char **argv)
{

    bcm2835_init(); //BCM2835 Library
    bcm2835_spi_begin(); //SPI BUS

    //PWM Mode  
    bcm2835_gpio_fsel(18,BCM2835_GPIO_FSEL_ALT5 ); //PWM0 signal on GPIO18   
    bcm2835_pwm_set_mode(0,1 , 1);                 //channel 0, markspace mode, PWM enabled. 
    bcm2835_pwm_set_range(0,64);  
    
    bcm2835_gpio_fsel(13,BCM2835_GPIO_FSEL_ALT0 ); //PWM1 signal on GPIO13    
    bcm2835_pwm_set_mode(1, 1, 1);                 //channel 1, markspace mode, PWM enabled.
    bcm2835_pwm_set_range(1,64);                  
    
    bcm2835_pwm_set_clock(2); 
    
    //SPI BUS
    bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_MSBFIRST);     
    bcm2835_spi_setDataMode(BCM2835_SPI_MODE0);                  
    bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_64);   
    bcm2835_spi_chipSelect(BCM2835_SPI_CS0);                     
    bcm2835_spi_setChipSelectPolarity(BCM2835_SPI_CS0, LOW);     
  
    uint8_t mosi[10] = { 0x01, 0x00, 0x00 }; //12 bit ADC read channel 0. 
    uint8_t miso[10] = { 0 };
  
    //Define GPIO pins configuration
    bcm2835_gpio_fsel(Button1, BCM2835_GPIO_FSEL_INPT);           
    bcm2835_gpio_fsel(Button2, BCM2835_GPIO_FSEL_INPT);          
    bcm2835_gpio_fsel(TS, BCM2835_GPIO_FSEL_INPT);   
    bcm2835_gpio_fsel(FS, BCM2835_GPIO_FSEL_INPT);     
    
    bcm2835_gpio_set_pud(Button1, BCM2835_GPIO_PUD_UP);             
    bcm2835_gpio_set_pud(Button2, BCM2835_GPIO_PUD_UP);           
    bcm2835_gpio_set_pud(TS, BCM2835_GPIO_PUD_UP);  
    bcm2835_gpio_set_pud(FS, BCM2835_GPIO_PUD_UP);    
    
    while(1) 
    {
    
    rTimer++;
    if (rTimer == 60000) {
        rTimer = 0;
        uint8_t Button1_value = bcm2835_gpio_lev(Button1);
        uint8_t Button2_value = bcm2835_gpio_lev(Button2);
        TS_value = bcm2835_gpio_lev(TS);
        uint8_t FS_value = bcm2835_gpio_lev(FS);
    if (Button2_value == 0)
        { 
         if (booster_value<4095) booster_value=booster_value+500;
         if (fuzz_value<2047) fuzz_value=fuzz_value+10;
         if (Delay_Depth<DELAY_MAX)Delay_Depth=Delay_Depth+25000; 
        }
        else if (Button1_value == 0)
        {
            if (booster_value>500) booster_value=booster_value-500;
            if (fuzz_value>0) fuzz_value=fuzz_value-10;
            if (Delay_Depth>DELAY_MIN)Delay_Depth=Delay_Depth-25000;
        }   
 
 //area where you change between effects while the TS is down
while (bcm2835_gpio_lev(TS))
    { 
    Button1_value= bcm2835_gpio_lev(Button1);
    Button2_value= bcm2835_gpio_lev(Button2);
 
    if (Button2_value == 0)
        { 
         if (effect_type<4) effect_type++;
        }
        else if (Button1_value == 0)
        {
            if (effect_type>1) effect_type--;
        }
	}    
}
 
    //Effects
    switch(effect_type)
    {
    case 1:
    //          BOOSTER 
    output_signal= (int)((float)(input_signal) * (float)((float) booster_value / (float) 4095.0));
    break;
 
    case 2:
    //            FUZZ
    if (input_signal > 2047 + fuzz_value) output_signal= 4095;
    if (input_signal < 2047 - fuzz_value) output_signal= 0;
    break;
 
    case 3:
    //            DELAY 
    Delay_Buffer[DelayCounter] = input_signal;
    DelayCounter++;
    if(DelayCounter >= Delay_Depth) DelayCounter = 0;
    output_signal = (Delay_Buffer[DelayCounter]+input_signal)>>1;
    break;
 
 
    case 4:
    //                ECHO
    Echo_Buffer[DelayCounter]  = (input_signal + Echo_Buffer[DelayCounter])>>1;
    DelayCounter++;    
    if(DelayCounter >= Delay_Depth) DelayCounter = 0;
    output_signal = (input_signal + (Echo_Buffer[DelayCounter]))>>1;
 
    break;
    }
 
    //Outputs PWM
    bcm2835_pwm_set_data(1,output_signal & 0x3F);
    bcm2835_pwm_set_data(0,output_signal >> 6);
    }
 
  
    bcm2835_spi_end();
    bcm2835_close();
    return 0;
}
